.TH neurowm 1 "15 August 2015" neurowm-0.15.1 "neurowm manual".TH  "" ""
.SH NAME
.PP
neurowm - a tiling window manager for X
.SH DESCRIPTION
.PP
\f[I]neurowm\f[] is an extremely configurable, fast, dynamic tiling window manager for X. It tries to be similar to xmonad, where you must write you own configuration using C language instead of Haskell language.
.SH USAGE
.PP
.B neurowm \f[][\f[I]OPTION\f[]]
.SS Flags
\f[1]neurowm\f[] has several flags which you may pass to the executable. These flags are:
.TP
.B --version
Display version of \f[I]neurowm\f[]
.RS
.RE
.TP
.B --help
Display help of \f[I]neurowm\f[]
.RS
.RE
.SS Default keyboard bindings
The default neurowm keyboard shortcuts loaded with defWMConfig are:
.TP
.B mod-shift-return
Launch terminal (\f[I]xterm\f[])
.RS
.RE
.TP
.B mod-c
close the focused window
.RS
.RE
.TP
.B mod-j
move focus to the next window
.RS
.RE
.TP
.B mod-k
move focus to the previous window
.RS
.RE
.TP
.B mod-tab
move focus to the previous focused window
.RS
.RE
.TP
.B mod-m
move focus to the master window
.RS
.RE
.TP
.B mod-shift-j
swap the focused window with the next window
.RS
.RE
.TP
.B mod-shift-k
swap the focused window with the previous window
.RS
.RE
.TP
.B mod-shift-p
swap the focused window with the previous focused window
.RS
.RE
.TP
.B mod-shift-m
swap the focused window with the master window
.RS
.RE
.TP
.B mod-up
move focus to the above window
.RS
.RE
.TP
.B mod-down
move focus to the below window
.RS
.RE
.TP
.B mod-left
move focus to the left window
.RS
.RE
.TP
.B mod-right
move focus to the right window
.RS
.RE
.TP
.B mod-shift-up
swap the focused window with the above window
.RS
.RE
.TP
.B mod-shift-down
swap the focused window with the below window
.RS
.RE
.TP
.B mod-shift-left
swap the focused window with the left window
.RS
.RE
.TP
.B mod-shift-right
swap the focused window with the right window
.RS
.RE
.TP
.B mod-n
minimize the current window
.RS
.RE
.TP
.B mod-shift-n
restore the last minimized window
.RS
.RE
.TP
.B mod-space
rotate through the available layout algorithms
.RS
.RE
.TP
.B mod-shift-space
reset the layouts on the current workspace to default
.RS
.RE
.TP
.B mod-t
toggle window into free/tiling mode
.RS
.RE
.TP
.B mod-shift-f
toggle window into fullscreen/tiling mode
.RS
.RE
.TP
.B mod-z
toggle layout into mirror/normal mode
.RS
.RE
.TP
.B mod-x
toggle layout into reflectX/normal mode
.RS
.RE
.TP
.B mod-y
toggle layout into reflectY/normal mode
.RS
.RE
.TP
.B mod-f
toggle layout into full/normal mode
.RS
.RE
.TP
.B mod-o
toggle layout into float/normal mode
.RS
.RE
.TP
.B mod-comma
increment the number of windows in the master area
.RS
.RE
.TP
.B mod-period
deincrement the number of windows in the master area
.RS
.RE
.TP
.B mod-l
expand the master area
.RS
.RE
.TP
.B mod-h
shrink the master area
.RS
.RE
.TP
.B mod-[0..9]
switch to workspace N
.RS
.RE
.TP
.B mod-shift-tab
switch to previous selected workspace
.RS
.RE
.TP
.B mod-shift-[0..9]
move client to workspace N
.RS
.RE
.TP
.B mod-shift-q
quit neurowm
.RS
.RE
.TP
.B mod-F2
launch app launcher (\f[I]gmrun\f[])
.RS
.RE
.TP
.B mod-q
reload neurowm
.RS
.RE
.TP
.B button1
focus client under pointer position (only when client does not have focus)
.RS
.RE
.TP
.B mod-button1
set the window to free mode and move by dragging
.RS
.RE
.TP
.B mod-button2
toggle window into free/tiling mode
.RS
.RE
.TP
.B mod-button3
set the window to free mode and resize by dragging
.RS
.RE
.TP
.B mod-shift-button1
move by dragging the focused window (only float layout)
.RS
.RE
.TP
.B mod-shift-button2
toggle winsow into fullscreen/tiling mode
.RS
.RE
.TP
.B mod-shift-button3
resize by dragging the focused window (only float layout)
.RS
.RE
.SH EXAMPLES
.PP
To use neurowm as your window manager add to your \f[I]~/.xinitrc\f[]
file:
.IP
.nf
\f[C]
exec\ neurowm
\f[]
.fi
.SH CUSTOMIZATION
In order to configure neurowm, you must code a neurowm.c file in C language 
under \f[I]~/.neurowm\f[] directory, then you must compile it and run it in order to 
see your applied changes.

A neurowm configuration is just a big struct of type \f[I]WMConfig\f[]. This struct must be passed as a parameter to a function called \f[I]neurowm\f[] within \f[I]neurowm.h\f[] module. There is already an initialized WMConfig struct called \f[I]defWMConfig\f[] in 
\f[I]config.h\f[] with the default neurowm configuration. Therefore, the simpliest 
\f[I]neurowm.c\f[] you can write is the following:
.IP
.nf
\f[C]
#include <neuro/neurowm.h>

int\ main()\ {
\ \ \ \ return\ neurowm(&defWMConfig);
}
\f[]
.fi
.PP
Now, in order to load this default configuration, you need to compile it with the neurowm binary: \f[I]neurowm --recompile\f[]
.SH WIKI
.PP
Visit \f[I]https://github.com/nnoell/neurowm/wiki\f[]
.SH BUGS
.PP
If you find any, please email to \f[I]nnoell3[at]gmail.com\f[]
.SH AUTHOR
.PP
Written by Julian Bouzas
